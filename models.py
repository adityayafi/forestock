# -*- coding: utf-8 -*-
"""Full PMD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qpl4XJxST3qJXrqTOZpf3WWlQqGnTwm1
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

from datetime import datetime
from pandas.plotting import autocorrelation_plot
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.stattools import adfuller
from numpy import log


df = pd.read_csv("D:\Python\Forecast\uploads\ADRO.csv", header=0, index_col=0, parse_dates=True)
series = df['Close']
df.head()

df.info()

series.plot()

# from random import randrange
# from statsmodels.tsa.seasonal import seasonal_decompose
# series = [i+randrange(10) for i in range(1,100)]
# result = seasonal_decompose(series, model='additive', period=1)
# result.plot()
# plt.show()

train, test = series[:198], series[198:]
n = len(series)
n_train = len(train)
n_test = len(test)

fig, ax = plt.subplots()
train.plot(ax=ax);
test.plot(ax=ax)

from statsmodels.tsa.seasonal import seasonal_decompose
result = seasonal_decompose(train, model='additive',period=1)

fig = plt.figure()
fig = result.plot()
fig.set_size_inches(20,12)

train.tail()

test.tail()

from  pmdarima.arima.utils import ndiffs
ndiffs(series, test="adf")

import pmdarima as pm

def arimamodel(timeseries):
  automodel = pm.auto_arima(timeseries,
                            test="adf",
                            trace=True,
                            stepwise=False,
                            suppress_warning=True)
  return automodel

automodel = arimamodel(train)
print(automodel.summary())

test.shape



predictions_arima = automodel.predict(n_periods = test.shape[0])
predictions_arima
# dates = pd.date_range(train.index[-1], n_forecast, freq="D")
# predictions_arima = pd.Series(predictions_arima, index=dates)



plt.figure(figsize=(12,7));
# plt.plot(train, "b-", label="train")
# plt.plot(test, "r-", label="test")
# plt.plot(predictions_arima, "g--", label="forecast")
plt.plot(test.index, test, label='Actual');
plt.plot(test.index, predictions_arima, label='Predicted');
plt.title('Forecasting - ARIMA')
plt.xlabel('Tanggal')
plt.ylabel('Value')
plt.legend();

model = ARIMA(train, order=(1,0,2))

# Training arima modeling 
model_fit = model.fit()
print(model_fit.summary())

model = ARIMA(train, order=(1, 0, 2))  
fitted = model.fit()  

# Forecast using 95% confidence interval
fc, se, conf = fitted.forecast(49, alpha=0.05) 

# Make as pandas series
fc_series = pd.Series(fc, index=test.index)
lower_series = pd.Series(conf[:, 0], index=test.index)
upper_series = pd.Series(conf[:, 1], index=test.index)

# Plot
plt.figure(figsize=(12,5), dpi=100)
plt.plot(train, label='training')
plt.plot(test, label='actual')
plt.plot(fc_series, label='forecast')
plt.fill_between(lower_series.index, lower_series, upper_series, color='k', alpha=.15)
plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()